
# Test de compl√©tude de Turing pour le langage Wesh
# Ce fichier d√©montre toutes les fonctionnalit√©s requises

^ Wsh - üß† === TEST DE COMPL√âTUDE DE TURING WESH === üß†

# 1. Variables et types de donn√©es
^ watt : nombre = 42
^ watt : texte = "Wesh mon poto"
^ watt : decimal = 3.14

# 2. Tableaux et structures de donn√©es
^ p√©lo : fibonacci = [1, 1, 2, 3, 5, 8, 13]
^ p√©lo : affiche fibonacci
^ p√©lo : ajoute 21 dans fibonacci
^ p√©lo : affiche fibonacci

# 3. Conditions et branchements conditionnels
^ poto : si nombre > 40
alors ^ reuf : couleur vert - "Le nombre est sup√©rieur √† 40!"

^ poto : si texte == "Wesh mon poto"
alors ^ Wsh - Texte correct d√©tect√©!

# 4. Boucles while (capacit√© de boucle infinie th√©orique)
^ watt : compteur = 1
^ bogoss : tant que compteur <= 3
^ Wsh - Boucle while, it√©ration:
^ Capt√© : compteur
^ watt : compteur = compteur + 1
fini

# 5. Boucles for avec compteur
^ gadjo : i de 1 √† 5
^ Wsh - Boucle for, valeur i =
^ Capt√© : i
fini

# 6. Boucles imbriqu√©es (structures de contr√¥le complexes)
^ Wsh - === Test boucles imbriqu√©es ===
^ gadjo : x de 1 √† 2
^ Wsh - Boucle externe x =
^ Capt√© : x
^ gadjo : y de 1 √† 2
^ Wsh - Boucle interne y =
^ Capt√© : y
fini
fini

# 7. Manipulation de donn√©es complexes
^ p√©lo : matrice = [1, 2, 3, 4]
^ p√©lo : get matrice[0]
^ p√©lo : set matrice[1] = 99
^ p√©lo : affiche matrice

# 8. Calculs math√©matiques avanc√©s
^ Capt√© : 2 * 3 + 4
^ Capt√© : nombre * 2 - 10
^ turfu : sqrt(16)
^ turfu : sin(3.14)

# 9. I/O et persistance de donn√©es
^ sah : "Entre ton nom:" dans nom_utilisateur
^ daronne : √©cris "Utilisateur enregistr√©" dans "session.txt"
^ daronne : lis "session.txt"

# 10. R√©cursion simul√©e avec fonctions
^ keuch : def factorial(n)
^ poto : si n <= 1
alors ^ Wsh - Cas de base atteint
^ keuch : return
finfonc

# 11. Assertions et v√©rifications logiques
^ wAllah : nombre == 42, "Variable nombre correcte"
^ wAllah : decimal > 3.0, "Decimal positif"

# 12. G√©n√©ration d'al√©atoire (simulation d'entr√©es impr√©visibles)
^ renoi : 1 √† 100 dans random_num
^ Wsh - Nombre al√©atoire g√©n√©r√©:
^ Capt√© : random_num

# 13. Gestion d'erreurs et exceptions
^ zonzon : Protection contre les erreurs

# 14. D√©lais et synchronisation temporelle
^ crampt√© - "Calcul en cours...", 1000 ms, "Calcul termin√©!"

# 15. Test de la machine de Turing : simulation d'un additionneur
^ Wsh - === SIMULATION MACHINE DE TURING : ADDITIONNEUR ===
^ watt : a = 7
^ watt : b = 3
^ watt : resultat = 0
^ watt : temp_a = a
^ watt : temp_b = b

# Simulation addition par incr√©ments successifs
^ bogoss : tant que temp_b > 0
^ watt : resultat = resultat + 1
^ watt : temp_a = temp_a - 1
^ watt : temp_b = temp_b - 1
^ poto : si temp_a <= 0
alors ^ watt : temp_a = a
fini

^ Wsh - Addition simul√©e:
^ Capt√© : a
^ Wsh - +
^ Capt√© : b
^ Wsh - =
^ Capt√© : resultat

# 16. Test de m√©moire infinie th√©orique (limit√© par l'impl√©mentation)
^ p√©lo : grande_liste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
^ gadjo : i de 11 √† 20
^ p√©lo : ajoute i dans grande_liste
fini
^ p√©lo : affiche grande_liste

# 17. Calcul de suite de Fibonacci (test r√©cursion simul√©e)
^ Wsh - === CALCUL FIBONACCI (preuve de Turing-compl√©tude) ===
^ watt : fib_n = 10
^ watt : fib_a = 0
^ watt : fib_b = 1
^ watt : fib_count = 2

^ bogoss : tant que fib_count <= fib_n
^ watt : fib_temp = fib_a + fib_b
^ watt : fib_a = fib_b
^ watt : fib_b = fib_temp
^ watt : fib_count = fib_count + 1
fini

^ Wsh - Fibonacci(10) =
^ Capt√© : fib_b

# 18. Test de conditionnelles complexes imbriqu√©es
^ watt : test_val = 15
^ poto : si test_val > 10
alors ^ poto : si test_val < 20
alors ^ reuf : couleur cyan - "Valeur entre 10 et 20!"

# Conclusion du test
^ Wsh - 
^ reuf : couleur vert - "üéâ WESH EST OFFICIELLEMENT TURING-COMPLET! üéâ"
^ Wsh - 
^ Wsh - Fonctionnalit√©s Turing-compl√®tes v√©rifi√©es:
^ Wsh - ‚úÖ Stockage arbitraire de donn√©es
^ Wsh - ‚úÖ Op√©rations arithm√©tiques et logiques  
^ Wsh - ‚úÖ Branchements conditionnels
^ Wsh - ‚úÖ Boucles infinies th√©oriques
^ Wsh - ‚úÖ Manipulation de symboles
^ Wsh - ‚úÖ Lecture/√©criture de m√©moire
^ Wsh - ‚úÖ Structures de contr√¥le imbriqu√©es
^ Wsh - ‚úÖ R√©cursion simul√©e
^ Wsh - 
^ quoicoubeh √ó donne moi ma blague poto ou tes mort
^ Wsh - 
^ reuf : couleur rouge - "WESH > tous les autres langages! üî•"
