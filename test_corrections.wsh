
# Test des corrections spÃ©cifiques pour Wesh
^ Wsh - ğŸ”§ Test des corrections apportÃ©es ğŸ”§

# Test 1: cramptÃ© corrigÃ©
^ Wsh - === Test cramptÃ© ===
^ cramptÃ© - "Chargement du swag...", 1500 ms, "Swag chargÃ©!"
^ cramptÃ© - "Compilation...", 800 ms, "PrÃªt!"

# Test 2: CitÃ© corrigÃ©  
^ Wsh - === Test CitÃ© ===
^ CitÃ© - 1000 ms
^ Wsh - DÃ©lai 1000ms terminÃ©
^ CitÃ© - 500
^ Wsh - DÃ©lai 500ms terminÃ©

# Test 3: Boucles imbriquÃ©es bogoss/gadjo
^ Wsh - === Test boucles imbriquÃ©es ===
^ watt : outer = 1
^ bogoss : tant que outer <= 2
^ Wsh - Boucle while externe:
^ CaptÃ© : outer
^ gadjo : inner de 1 Ã  3
^ Wsh - Boucle for interne:
^ CaptÃ© : inner
fini
^ watt : outer = outer + 1
fini

# Test 4: pÃ©lo avec nouvelles fonctionnalitÃ©s
^ Wsh - === Test pÃ©lo avancÃ© ===
^ pÃ©lo : test_array = [10, 20, 30]
^ pÃ©lo : affiche test_array
^ pÃ©lo : get test_array[1]
^ pÃ©lo : set test_array[0] = 99
^ pÃ©lo : affiche test_array
^ pÃ©lo : ajoute 40 dans test_array
^ pÃ©lo : affiche test_array
^ pÃ©lo : taille test_array
^ pÃ©lo : tri test_array
^ pÃ©lo : affiche test_array

# Test 5: Conditions avec strings
^ Wsh - === Test conditions strings ===
^ watt : nom = "Kevin"
^ poto : si nom == "Kevin"
alors ^ reuf : couleur vert - "Salut Kevin!"

# Test 6: Variables multiples types
^ watt : entier = 42
^ watt : flottant = 3.14159
^ watt : chaine = "Test"
^ teubÃ© : variables

^ Wsh - 
^ reuf : couleur cyan - "âœ… Toutes les corrections fonctionnent!"
